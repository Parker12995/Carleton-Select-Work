library(glue)
library(dplyr)
library(sf)
library(sp)
library(spatstat)
expcov <- nimbleFunction(run = function(dists = double(2), phi = double(0), sigma = double(0)) {
returnType(double(2))
n <- dim(dists)[1]
m <- dim(dists)[2]
# result <- matrix(nrow = n, ncol = m, init = FALSE)
sigma2 <- sigma*sigma
result <- sigma2*exp(-dists/phi)
# for(i in 1:n){
#   for(j in 1:m){
#     result[i, j] <- sigma2*exp(-dists[i,j]/phi)
#   }
# }
return(result)
})
######################load data###########################################################################
#bind in another script sim_points and the overlayed data below
obs_pts_and_covs <- read.csv("../../../../../data/working/ward_9_blockgroups/use_of_force/obs_points_with_bg_level_cov.csv")
sim_pts_and_covs <- read.csv("../../../../../data/working/ward_9_blockgroups/over_simpoints_cov_scalebyarea_mult8.csv")
knots <- read.csv("../../../../../data/working/ward_9_blockgroups/71_knots.csv")
load("../../../../../data/working/ward_9_blockgroups/Ward9_Blocks.Rdata")
ward9_blocks.sf <- st_as_sf(ward9_blocks)
for (i in 1:nrow(ward9_blocks.sf)) {
ward9_blocks.sf[i, 39] <- area(st_transform(st_union(ward9_blocks.sf[i, ]),crs = 6345))
}
obs_pts_and_covs$perc_white <- obs_pts_and_covs$total_white/obs_pts_and_covs$total_pop
obs_pts_and_covs$total_pop_norm <- obs_pts_and_covs$total_pop/max(obs_pts_and_covs$total_pop)
sim_pts_and_covs$perc_white <- sim_pts_and_covs$total_white/sim_pts_and_covs$total_pop
sim_pts_and_covs$total_pop_norm <- sim_pts_and_covs$total_pop/max(sim_pts_and_covs$total_pop)
n_uof = nrow(obs_pts_and_covs)
n_sim = nrow(sim_pts_and_covs)
n_knots <- nrow(knots)
covs <- as.matrix(obs_pts_and_covs[,c("perc_white", "perc_unemployed", "total_pop_norm")])
sim_covs <- as.matrix(sim_pts_and_covs[,c("perc_white", "perc_unemployed", "total_pop_norm")])
# distance matrices
knots_dists <- rdist(knots, knots)
observed_pts_vs_knots_dists <- rdist(obs_pts_and_covs[,1:2], knots)
integration_pts_vs_knots_dists <- rdist(sim_pts_and_covs[,1:2], knots)
code <- nimbleCode({
beta0 ~ dnorm(0, sd = 100)
beta1 ~ dnorm(0, sd = 100)
beta2 ~ dnorm(0, sd = 100)
beta3 ~ dnorm(0, sd = 100)
sigma   ~  dinvgamma(shape = 2, scale = 0.5)
XB[1:n_uof] <- beta0 + beta1*covs[,1] + beta2*covs[,2] + beta3*covs[,3]
XB_int[1:n_sim] <- beta0 + beta1*sim_covs[,1] + beta2*sim_covs[,2] + beta3*sim_covs[,3]
knots_cov[1:n_knots, 1:n_knots] <- expcov(knots_dists[1:n_knots, 1:n_knots], phi = 0.1, sigma= sigma)
observed_pts_vs_knots_cov[1:n_uof, 1:n_knots] <- expcov(observed_pts_vs_knots_dists[1:n_uof, 1:n_knots], phi = 0.1, sigma= sigma)
integration_pts_vs_knots_cov[1:n_sim, 1:n_knots] <- expcov(integration_pts_vs_knots_dists[1:n_sim, 1:n_knots], phi = 0.1, sigma= sigma)
gp_on_knots[1:n_knots] ~ dmnorm(knots_mean[1:n_knots], cov=knots_cov[1:n_knots, 1:n_knots])
gp_on_observed_pts[1:n_uof] <- observed_pts_vs_knots_cov[1:n_uof, 1:n_knots] %*% inverse(knots_cov[1:n_knots, 1:n_knots]) %*% gp_on_knots[1:n_knots]
gp_on_integration_pts[1:n_sim] <- integration_pts_vs_knots_cov[1:n_sim, 1:n_knots] %*% inverse(knots_cov[1:n_knots, 1:n_knots]) %*% gp_on_knots[1:n_knots]
integ <- (area / n_sim) * sum(exp(XB_int[1:n_sim] + 1 * gp_on_integration_pts[1:n_sim]))
})
Rmodel <- nimbleModel(
code,
data = list(),
inits = list(
beta0 = 0,
beta1 = 0,
beta2 = 0,
beta3 = 0,
sigma = 1,
gp_on_knots = numeric(n_knots),
gp_on_observed_pts = numeric(n_uof),
gp_on_integration_pts = numeric(n_sim)
),
constants = list(
sim_covs = sim_covs,
covs = covs,
area = sum(ward9_blocks.sf[, 39]$V39),
n_uof = n_uof, n_sim = n_sim,
knots_mean = numeric(n_knots),
knots_dists = knots_dists, observed_pts_vs_knots_dists = observed_pts_vs_knots_dists,
integration_pts_vs_knots_dists = integration_pts_vs_knots_dists,
n_knots = n_knots
)
)
Rmodel$initializeInfo()
llFun <- nimbleFunction(
setup = function(model) { },
run = function() {
ll <- sum(model$XB + 1 * model$gp_on_observed_pts) - model$integ
returnType(double())
return(ll[1])
}
)
RllFun <- llFun(Rmodel)
mcmcConf <- configureMCMC(Rmodel, nodes = NULL, monitors = c("beta0", "beta1", "beta2", "beta3", "sigma", "gp_on_knots"))
# this ensures that gp_on_knots is monitored alongside of other nodes, but also makes sure that no default samplers are assigned
# adding custom samplers
mcmcConf$addSampler(target = "beta0", type = "RW_llFunction",
control = list(llFunction = RllFun, includesTarget = FALSE))
mcmcConf$addSampler(target = "beta1", type = "RW_llFunction",
control = list(llFunction = RllFun, includesTarget = FALSE))
mcmcConf$addSampler(target = "beta2", type = "RW_llFunction",
control = list(llFunction = RllFun, includesTarget = FALSE))
mcmcConf$addSampler(target = "beta3", type = "RW_llFunction",
control = list(llFunction = RllFun, includesTarget = FALSE))
mcmcConf$addSampler(target = "sigma", type = "RW_llFunction",
control = list(llFunction = RllFun, includesTarget = FALSE))
mcmcConf$addSampler(target = "gp_on_knots", type = "RW_llFunction_block",
control = list(llFunction = RllFun, includesTarget = FALSE))
mcmcConf$printSamplers()
Rmcmc <- buildMCMC(mcmcConf)
comp_model <- compileNimble(Rmodel)
comp_MCMC <- compileNimble(Rmcmc)
mcmcConf$getUnsampledNodes()
# setwd("/Users/ayaklos/Documents/GitHub/carleton_comps_22_23/src/parker")
minn_wards <- st_read("../../data/original/City_Council_Wards/WARDS.shp") %>%
as_Spatial()
# setwd("/Users/ayaklos/Documents/GitHub/carleton_comps_22_23/src/parker")
minn_wards <- st_read("/Users/ayaklos/Documents/GitHub/carleton_comps_22_23/data/original/City_Council_Wards/WARDS.shp") %>%
as_Spatial()
minneapolis_blocks <- block_groups("Minnesota", c("Hennepin"))
minneapolis_blocks <- as_Spatial(minneapolis_blocks)
minneapolis_blocks <- block_groups("Minnesota", c("Hennepin"))
minneapolis_blocks <- as_Spatial(minneapolis_blocks)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
View(minn_acs_data)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E",
"B06012_003"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
View(minn_acs_data)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E",
"B06012_003", "B06012_002"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E",
"B06012_003E", "B06012_002E"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
View(minn_acs_data)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E",
"B15003_022E"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"),
c("B15003_022", "ea_bachelors"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E",
"B15003_022E", "B15003_017E",
"B15003_023E", "B19013_001E",
"B06009_001E"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"),
c("B15003_022", "ea_bachelors"),
c("B15003_017", "ea_hsdiplomma"),
c("B15003_023", "ea_masters"),
c("B19013_001", "med_hh_income"),
c("B06009_001", "total_ed_attain"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E",
"B15003_022E", "B15003_017E",
"B15003_023E", "B19013_001E",
"B15003_001E"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"),
c("B15003_022", "ea_bachelors"),
c("B15003_017", "ea_hsdiplomma"),
c("B15003_023", "ea_masters"),
c("B19013_001", "med_hh_income"),
c("B15003_001", "total_ea"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E",
"B15003_022E", "B15003_017E",
"B15003_023E", "B19013_001E",
"B15003_001E", "B05001_001E"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"),
c("B15003_022", "ea_bachelors"),
c("B15003_017", "ea_hsdiplomma"),
c("B15003_023", "ea_masters"),
c("B19013_001", "med_hh_income"),
c("B15003_001", "total_ea"),
c("B05001_001", "total_citizenship"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
minn_census_blocks <- get_acs(geography = "block group",
variables = c("B01003_001E",
"B01001_002E", "B01001_026E",
"B02008_001E", "B02009_001E",
"B02010_001E", "B02011_001E",
"B02012_001E", "B02013_001E",
"B03001_002E", "B03001_003E",
"B06011_001E", "B06012_002E",
"B06012_003E", "B23025_003E",
"B23025_004E", "B23025_005E",
"B15003_022E", "B15003_017E",
"B15003_023E", "B19013_001E",
"B15003_001E", "B05001_001E",
"B27010_034E"), year = 2021,
state = "MN", county = c("Hennepin County"),
geometry = F)
code_book_mn <- rbind(c("B01003_001", "total_pop"),
c("B01001_002", "total_male"),
c("B01001_026", "total_female"),
c("B02008_001", "total_white"),
c("B02009_001", "total_black"),
c("B02010_001", "total_native"),
c("B02011_001", "total_asian"),
c("B02012_001", "total_islander"),
c("B02013_001", "total_otherrace"),
c("B03001_002", "total_not_hispanic"),
c("B03001_003", "total_hispanic"),
c("B06011_001", "med_income"),
c("B06012_002", "below_pov_level"),
c("B06012_003", "100_149_above_pov_level"),
c("B23025_003", "total_labor_force"),
c("B23025_004", "total_employed"),
c("B23025_005", "total_unemployed"),
c("B15003_022", "ea_bachelors"),
c("B15003_017", "ea_hsdiplomma"),
c("B15003_023", "ea_masters"),
c("B19013_001", "med_hh_income"),
c("B15003_001", "total_ea"),
c("B05001_001", "total_citizenship"),
c("B27010_034", "total_types_hi"))
code_book_mn <- as.data.frame(code_book_mn)
colnames(code_book_mn) <- c("variable", "var_name")
minn_census_blocks <- left_join(minn_census_blocks, code_book_mn)
#format the data so there is a row for each census tract and column for every variable
minn_acs_data <- maditr::dcast(minn_census_blocks, GEOID ~ var_name, value.var = "estimate", fun.aggregate = NULL)
load("/Users/ayaklos/Documents/GitHub/carleton_comps_22_23/data/working/ward_9_blockgroups/Ward9_Blocks.Rdata")
minn_bg.sf <- st_as_sf(ward9_blocks)
n_it <- ncol(minn_bg.sf)+1
for (i in 1:nrow(minn_bg.sf)) {
minn_bg.sf[i, n_it] <- area(st_transform(st_union(minn_bg.sf[i, ]),crs = 6345))
}
#create integration points by uniformly distributing them over window
all_bg_loop <- st_transform(st_union(minn_bg.sf),crs = 6345)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sp)
library(tigris)
library(ggmap)
library(tidycensus)
library(maditr)
library(spdep)
library(spatialreg)
library(gridExtra)
library(sf)
library(spatstat)
#create integration points by uniformly distributing them over window
all_bg_loop <- st_transform(st_union(minn_bg.sf),crs = 6345)
load("/Users/ayaklos/Documents/GitHub/carleton_comps_22_23/data/working/ward_9_blockgroups/Ward9_Blocks.Rdata")
minn_bg.sf <- st_as_sf(ward9_blocks)
n_it <- ncol(minn_bg.sf)+1
for (i in 1:nrow(minn_bg.sf)) {
minn_bg.sf[i, n_it] <- area(st_transform(st_union(minn_bg.sf[i, ]),crs = 6345))
}
minn_bg.sf$tract_area <- minn_bg.sf$V51
minn_bg.sf <- minn_bg.sf[, -n_it]
#create integration points by uniformly distributing them over window
all_bg_loop <- st_transform(st_union(minn_bg.sf),crs = 6345)
all_bg_win_loop <- all_bg_loop %>% as.owin()
sim_points_coor <- runifpoint(10000,win=all_bg_win_loop)
plot(sim_points_coor)
#bind in another script sim_points and the overlayed data below
obs_pts_and_covs <- read.csv("../../../../../data/working/ward_9_blockgroups/use_of_force/obs_points_with_bg_level_cov.csv")
View(obs_pts_and_covs)
sim_pts_and_covs <- read.csv("../../../../../data/working/ward_9_blockgroups/over_simpoints_cov_scalebyarea_mult8.csv")
View(sim_pts_and_covs)
